{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
      "location": {
        "type": "string",
        "metadata": {
          "description": "Deployment location"
        }
      },
      
      "UbuntuOSVersion": {
        "type": "string",
        "defaultValue": "18.04-LTS",
        "allowedValues": [
            "18.04-LTS"
        ],
        "metadata": {
          "description": "The Windows version for the VM. This will pick a fully patched image of this given Windows version."
        }
      },
      "vmName": {
        "type": "string",
        "metadata": {
          "title": "VM Name",
          "description": "This is the name of the your VM"
        }
      },
      "adminUsername": {
        "type": "string",
        "defaultValue": "inferno",
        "metadata": {
          "description": "Username for the Virtual Machine."
        }
      },
      "adminPassword": {
        "type": "securestring",
        "defaultValue": "Inferno@24121997",
        "metadata": {
          "description": "Password for the Virtual Machine."
        }
      },
      "virtualNetworkName": {
        "type": "string",
        "metadata": {
          "description": "New or Existing VNet Name"
        }
      },
      "forwardIP": {
        "type": "string",
        "defaultValue": "168.63.129.16",
        "metadata": {
          "description": "This is the IP address to forward DNS queries to. The default value represents Azure's internal DNS recursive resolvers."
        }
      },
      "location": {
        "type": "string",
        "defaultValue": "[resourceGroup().location]",
        "metadata": {
          "description": "Location for all resources."
        }
      },
      "virtualNetworkNewOrExisting": {
        "type": "string",
        "defaultValue": "vnet-inf-sbx-cin-001",
        "metadata": {
          "description": "Boolean indicating whether the VNet is new or existing"
        }
      },
      "virtualNetworkAddressPrefix": {
        "type": "string",
        "defaultValue": "10.110.0.0/16",
        "metadata": {
          "description": "VNet address prefix"
        }
      },
      "virtualNetworkResourceGroup": {
        "type": "string",
        "metadata": {
          "description": "Resource group of the VNet"
        }
      },
      "virtualMachineSize": {
        "type": "string",
        "defaultValue": "Standard_F2s_v2",
        "metadata": {
          "description": "The size of the VM"
        }
      },
      "subnetName": {
        "type": "string",
        "defaultValue": "Standard_F2s_v2",
        "metadata": {
          "description": "New or Existing subnet Name"
        }
      },
      "subnetAddressPrefix": {
        "type": "string",
        "defaultValue": "10.110.0.0/24",
        "metadata": {
          "description": "Subnet address prefix"
        }
      },
      "_artifactsLocation": {
        "type": "string",
        "defaultValue": "[deployment().properties.templatelink.uri]",
        "metadata": {
          "description": "The base URI where artifacts required by this template are located."
        }
      },
      "_artifactsLocationSasToken": {
        "type": "securestring",
        "defaultValue": "",
        "metadata": {
          "description": "The sasToken required to access _artifactsLocation.  When the template is deployed using the accompanying scripts, a sasToken will be automatically generated."
        }
      }
    },
    "variables": {
      "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'sawinvm')]",
      "publicIPAddressName": "[concat(uniqueString(resourceGroup().id),'IP')]",
      "vmName": "[parameters('vmName')]",
      "nicName": "[concat(parameters('vmName'),'Nic')]",
      "vnetId": {
        "new": "[resourceId('Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]",
        "existing": "[resourceId(parameters('virtualNetworkResourceGroup'),'Microsoft.Network/virtualNetworks',parameters('virtualNetworkName'))]"
      },
      "subnetId": "[concat(variables('vnetId')[parameters('virtualNetworkNewOrExisting')],'/subnets/',parameters('subnetName'))]",
      "publicIPAddressType": "Dynamic"
    },
    "resources": [
      {
        "condition": "[equals(parameters('virtualNetworkNewOrExisting'),'new')]",
        "type": "Microsoft.Network/virtualNetworks",
        "apiVersion": "2021-02-01",
        "name": "[parameters('virtualNetworkName')]",
        "location": "[parameters('location')]",
        "properties": {
          "addressSpace": {
            "addressPrefixes": [
              "[parameters('virtualNetworkAddressPrefix')]"
            ]
          },
          "subnets": [
            {
              "name": "[parameters('subnetName')]",
              "properties": {
                "addressPrefix": "[parameters('subnetAddressPrefix')]"
              }
            }
          ]
        }
      },
      {
        "type": "Microsoft.Network/publicIPAddresses",
        "name": "[variables('publicIPAddressName')]",
        "apiVersion": "2021-02-01",
        "location": "[parameters('location')]",
        "properties": {
          "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
        }
      },
      {
        "type": "Microsoft.Network/networkInterfaces",
        "name": "[variables('nicName')]",
        "apiVersion": "2021-02-01",
        "location": "[parameters('location')]",
        "properties": {
          "ipConfigurations": [
            {
              "name": "ipconfig1",
              "properties": {
                "privateIPAllocationMethod": "Dynamic",
                "publicIPAddress": {
                  "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]"
                },
                "subnet": {
                  "id": "[variables('subnetId')]"
                }
              }
            }
          ],
          "enableIPForwarding": true
        },
        "dependsOn": [
          "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]",
          "[resourceId('Microsoft.Network/virtualNetworks/', parameters('virtualNetworkName'))]"
        ]
      },
      {
        "type": "Microsoft.Storage/storageAccounts",
        "apiVersion": "2021-04-01",
        "name": "[variables('storageAccountName')]",
        "location": "[parameters('location')]",
        "sku": {
          "name": "Standard_LRS"
        },
        "kind": "Storage",
        "properties": {}
      },
      {
        "type": "Microsoft.Compute/virtualMachines",
        "apiVersion": "2021-04-01",
        "name": "[variables('vmName')]",
        "location": "[parameters('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
          "[resourceId('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
        ],
        "properties": {
          "hardwareProfile": {
            "vmSize": "[parameters('virtualMachineSize')]"
          },
          "osProfile": {
            "computerName": "[variables('vmName')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "storageProfile": {
            "imageReference": {
              "publisher": "Canonical",
              "offer": "UbuntuServer",
              "sku": "[variables('ubuntuOSVersion')]",
              "version": "latest"
            },
            "osDisk": {
                "caching": "ReadWrite",
                "createOption": "FromImage"
            }
          },
          "networkProfile": {
            "networkInterfaces": [
              {
                "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
              }
            ]
          },
          "diagnosticsProfile": {
            "bootDiagnostics": {
              "enabled": true,
              "storageUri": "[reference(resourceId('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))).primaryEndpoints.blob]"
            }
          }
        }
      },
      {
        "type": "Microsoft.Compute/virtualMachines/extensions",
        "comments": "The shell script to install Bind9 and setup the ACL and forwarders.  If this step fails, check the logs in /var/log/waagent.log and /var/log/azure/* for details",
        "name": "[concat(parameters('vmName'),'/setupdnsfirewall')]",
        "apiVersion": "2019-12-01",
        "location": "[variables('location')]",
        "dependsOn": [
          "[resourceId('Microsoft.Compute/virtualMachines/', parameters('vmName'))]"
        ],
        "properties": {
          "publisher": "Microsoft.Azure.Extensions",
          "type": "CustomScript",
          "typeHandlerVersion": "2.0",
          "autoUpgradeMinorVersion": true,
          "settings": {
            "fileUris": [
              "[variables('scriptUrl')]"
            ],
            "commandToExecute": "[concat('sh forwarderSetup.sh',' ',parameters('forwardIP'),' ', variables('vnetAddressPrefix'))]"
          }
        }
      }
    ]
  }